<?xml version="1.0"?>

<robot xmlns:xacro="http://www.ros.org/wiki/xacro">

  <!-- MACRO FOR THRUSTER UNITS  -->

  <!-- Provide the propeller mesh in a separate file with the rotation axis
  over propeller's frame X-axis in DAE (Collada) or STL format.
  -->
  <xacro:property name="prop_mesh_file" value="file://$(find bluerov2_description)/meshes/bluerov2_propcw.dae"/>
  <!--
    Thruster macro with integration of joint and link. The thrusters should
    be initialized in the actuators.xacro file.
  -->
  <xacro:macro name="thruster_macro" params="robot_namespace thruster_id *origin">
    <!--
    Dummy link as place holder for the thruster frame,
    since thrusters can often be inside the collision geometry
    of the vehicle and may cause internal collisions if set otherwise
    -->
    <link name="${robot_namespace}/thruster_${thruster_id}">

      <visual>
        <geometry>
          <mesh filename="${prop_mesh_file}" scale="1 1 1" />
        </geometry>
      </visual>

      <inertial>
        <mass value="0.010" />
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <inertia ixx="0.000000017" ixy="0.0" ixz="0.0"
               iyy="0.000000017" iyz="0.0"
               izz="0.000000017" />
      </inertial>
    </link>

    <!-- Joint between thruster link and vehicle base link -->
    <joint name="${robot_namespace}/thruster_${thruster_id}_joint" type="continuous">
      <xacro:insert_block name="origin" />
      <axis xyz="1 0 0" />
      <parent link="${robot_namespace}/base_link" />
      <child link="${robot_namespace}/thruster_${thruster_id}" />
    </joint>

    <!-- From desistek underwater vehicle -->
    <gazebo>
      <!-- Thruster ROS plugin -->
     <plugin name="${robot_namespace}_${thruster_id}_thruster_model" filename="libuuv_thruster_ros_plugin.so">
       <!-- Name of the thruster link -->
       <linkName>${robot_namespace}/thruster_${thruster_id}</linkName>
       <!-- Name of the joint between thruster and vehicle base link -->
       <jointName>${robot_namespace}/thruster_${thruster_id}_joint</jointName>
       <!-- Make the thruster aware of its id -->
       <thrusterID>${thruster_id}</thrusterID>
       <!-- Gain of the input command signal -->
       <gain>1</gain>
       <!-- Maximum allowed input value for the input signal for thruster unit -->
       <!-- <clampMax>0</clampMax> -->
       <!-- Minimum allowed value for the input signal for thruster unit -->
       <!-- <clampMin>0</clampMin> -->
       <!-- Minimum and maximum thrust force output allowed -->
       <!-- <thrustMin>0</thrustMin> -->
       <!-- <thrustMax>200</thrustMax> -->
       <!--
       Value from 0 to 1 to set the efficiency of the output thrust force
       Default value is 1.0
       -->
       <thrust_efficiency>1</thrust_efficiency>
       <!--
       Value from 0 to 1 to set the efficiency of the propeller as a factor
       to be multiplied to the current value of the state variable at each
       iteration.
       Default value is 1.0
       -->
       <propeller_efficiency>1</propeller_efficiency>

       <!-- 2) First order model -->
       <dynamics>
         <type>FirstOrder</type>
         <timeConstant>0.2</timeConstant>
       </dynamics>

       <conversion>
         <type>Basic</type>
         <rotorConstant>0.0001</rotorConstant>
         <!-- <rotorConstant>0</rotorConstant> -->
       </conversion>

     </plugin>
   </gazebo>

    <gazebo reference="${robot_namespace}/thruster_${thruster_id}">
      <selfCollide>false</selfCollide>
    </gazebo>

  </xacro:macro>

  <xacro:macro name="bluerov_camera" params="namespace parent_link suffix *origin">
    <xacro:regular_camera_plugin_macro
      namespace="${namespace}"
      suffix="${suffix}"
      parent_link="${parent_link}"
      topic="camera"
      mass="0.001"
      update_rate="30"
      hfov="1.5125"
      width="1920"
      height="1080"
      stddev="0.01"
      scale="1.0">
      <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001" />
      <xacro:insert_block name="origin" />
    </xacro:regular_camera_plugin_macro>
  </xacro:macro>
    

  <xacro:macro name="bluerov_altimeter"
    params="namespace suffix parent_link *origin">
    <!-- Sensor link -->
    <link name="${namespace}/altimeter${suffix}_link">
      <inertial>
        <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001" />
        <mass value="0.01" />
        <origin xyz="0 0 0" rpy="0 0 0"/>
      </inertial>
      <visual>
        <geometry>
          <mesh filename="file://$(find bluerov2_description)/meshes/ping1d.dae" scale="1 1 1"/>
        </geometry>
        <origin xyz="0 0 0" rpy="0 0 -${0.5*pi}"/>
      </visual>
      <xacro:no_collision/>
    </link>

    <joint name="${namespace}_altimeter${suffix}_joint" type="revolute">
      <xacro:insert_block name="origin" />
      <parent link="${parent_link}" />
      <child link="${namespace}/altimeter${suffix}_link" />
      <limit upper="0" lower="0" effort="0" velocity="0" />
      <axis xyz="1 0 0"/>
    </joint>

    <gazebo reference="${namespace}/altimeter${suffix}_link">
      <sensor type="ray" name="sonar">
          <pose>0 0 0 0 0 0</pose>
          <update_rate>15.0</update_rate>
          <ray>
            <scan>
              <horizontal>
                <samples>5.0</samples>
                <resolution>1</resolution>
                <min_angle>-${15*pi/180}</min_angle>
                <max_angle>${15*pi/180}</max_angle>
              </horizontal>
              <vertical>
                <samples>5.0</samples>
                <resolution>1</resolution>
                <min_angle>-${15*pi/180}</min_angle>
                <max_angle>${15*pi/180}</max_angle>
              </vertical>
            </scan>
            <range>
              <min>0.01</min>
              <max>30.0</max>
              <resolution>0.001</resolution>
            </range>
          </ray>
          <plugin filename="libgazebo_ros_range.so" name="gazebo_ros_range">
            <gaussianNoise>0.005</gaussianNoise>
            <alwaysOn>true</alwaysOn>
            <updateRate>15.0</updateRate>
            <topicName>altimeter${suffix}</topicName>
            <frameName>${namespace}/altimeter${suffix}_link</frameName>
            <fov>${30*pi/180}</fov>
            <radiation>ultrasound</radiation>
          </plugin>
        </sensor>
    </gazebo>

  </xacro:macro>

  <xacro:macro name="bluerov2_sss"
    params="namespace suffix parent_link topic mass update_rate
      samples fov range_min range_max range_stddev mesh
      *inertia *origin *visual">
    <!-- Sensor link -->
    <link name="${namespace}/sonar${suffix}_link">
      <inertial>
        <xacro:insert_block name="inertia" />
        <mass value="${mass}" />
        <origin xyz="0 0 0" rpy="0 0 0" />
      </inertial>

      <xacro:insert_block name="visual" />
      <xacro:no_collision/>
    </link>

  <joint name="${namespace}_sonar${suffix}_joint" type="revolute">
    <xacro:insert_block name="origin" />
    <parent link="${parent_link}" />
    <child link="${namespace}/sonar${suffix}_link" />
    <limit upper="0" lower="0" effort="0" velocity="0" />
    <axis xyz="1 0 0"/>
  </joint>

  <gazebo reference="${namespace}/sonar${suffix}_link">
    <sensor type="ray" name="sonar${suffix}">
      <pose>0 0 0 0 0 0</pose>
      <visualize>true</visualize>
      <update_rate>${update_rate}</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>${samples}</samples>
            <resolution>1</resolution>
            <min_angle>-${0.5*fov}</min_angle>
            <max_angle>${0.5*fov}</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>${range_min}</min>
          <max>${range_max}</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>${range_stddev}</stddev>
        </noise>
      </ray>
      <plugin name="sonar${suffix}_controller" filename="libgazebo_ros_laser.so">
        <topicName>${topic}${suffix}</topicName>
        <frameName>sonar${suffix}_link</frameName>
      </plugin>
    </sensor>
  </gazebo>
  </xacro:macro>

</robot>
