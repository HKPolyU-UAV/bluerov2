<launch>
  <!-- Debug flag -->
  <arg name="debug" default="0"/>
  <!-- Vehicle's initial pose -->
  <arg name="x" default="0"/>
  <arg name="y" default="0"/>
  <arg name="z" default="-2"/>
  <arg name="roll" default="0.0"/>
  <arg name="pitch" default="0.0"/>
  <arg name="yaw" default="0.0"/>

  <arg name="use_geodetic" default="false"/>
  <arg name="latitude" default="0"/>
  <arg name="longitude" default="0"/>
  <arg name="depth" default="0"/>

  <arg name="latitude_ref" default="0"/>
  <arg name="longitude_ref" default="0"/>
  <arg name="altitude_ref" default="0"/>

  

  <arg name="gazebo_tf" default="true"/>

  <!-- Mode to open different robot configurations as set the in file
  nomenclature standard for the files in /robots
  /robots/<mode>.xacro
  -->
  <arg name="mode" default="default"/>
  <!-- Vehicle's namespace -->
  <arg name="namespace" default="bluerov2"/>
  <!-- World Frame -->
  <arg name="use_ned_frame" default="world"/>

  <!-- <arg name="use_simplified_mesh" default="false"/> -->
  <!-- <arg name="use_ned_frame" default="false"/> -->

  <group ns="$(arg namespace)">
    <group if="$(arg use_ned_frame)">
      <param name="robot_description"
        command="$(find xacro)/xacro '$(find bluerov2_description)/robots/bluerov2_$(arg mode).xacro' --inorder
          debug:=$(arg debug)
          namespace:=$(arg namespace)" />

          <!-- use_simplified_mesh:=$(arg use_simplified_mesh) -->
          inertial_reference_frame:=world_ned
    </group>

    <group unless="$(arg use_ned_frame)">
      <param name="robot_description"
        command="$(find xacro)/xacro '$(find bluerov2_description)/robots/$(arg mode).xacro' --inorder
          debug:=$(arg debug)
          namespace:=$(arg namespace)
          inertial_reference_frame:=world" />
    </group>

    <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
          args="-urdf -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw) -model $(arg namespace) -param /$(arg namespace)/robot_description"/>

    <!-- A joint state publisher plugin already is started with the model, no need to use the default joint state publisher -->

    <!-- Publish robot model for ROS -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen">
      <param name="robot_description" value="/$(arg namespace)/robot_description" />
      <param name="publish_frequency" value="5" />
    </node>
  </group>

  <!-- Publish state and tf for in relation to the world frame -->
  <include file="$(find uuv_descriptions)/launch/message_to_tf.launch">
      <arg name="namespace" value="$(arg namespace)"/>
  </include>

</launch>